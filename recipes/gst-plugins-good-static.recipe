# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import os
import shutil
import tempfile

from cerbero.utils import copy_files, to_unixpath, shell
from cerbero.build.build import system_libs


class Recipe(recipe.Recipe):
    name = 'gst-plugins-good-static'
    version = '0.10.31'
    commit = 'sdk-release-sdk-2012.5'
    licenses = [License.LGPLv2Plus]
    config_sh = 'sh ./autogen.sh --noconfigure && ./configure'
    configure_options = '--disable-introspection --disable-examples --disable-shared --enable-static --disable-oss4 --disable-oss --disable-dv1394 --disable-aalib --disable-libcaca --disable-esd --disable-gconf --disable-hal --disable-jack --disable-cairo --disable-shout2 --with-package-origin="http://www.gstreamer.com" --with-package-name=\'GStreamer Good Plugins (GStreamer SDK)\' '
    remotes = {'upstream': 'git://anongit.freedesktop.org/gstreamer/gst-plugins-good'}
    deps = ['gstreamer', 'gst-plugins-base', 'jpeg', 'libpng',
            'speex', 'gdk-pixbuf', 'libsoup',
            'orc', 'wavpack', 'flac', 'taglib', 'bzip2', 'zlib' ]
    platform_deps = {Platform.LINUX: ['libdv'],
                     Platform.DARWIN: ['libdv']}
    use_system_libs = True

    files_core_devel = [
             'lib/gstreamer-0.10/libgstautodetect%(smext)s',
             'lib/gstreamer-0.10/libgstvideofilter%(smext)s',
    ]

    files_effects_devel = [
             'lib/gstreamer-0.10/libgstalpha%(smext)s',
             'lib/gstreamer-0.10/libgstalphacolor%(smext)s',
             'lib/gstreamer-0.10/libgstaudiofx%(smext)s',
             'lib/gstreamer-0.10/libgstcutter%(smext)s',
             'lib/gstreamer-0.10/libgstdebug%(smext)s',
             'lib/gstreamer-0.10/libgstdeinterlace%(smext)s',
             'lib/gstreamer-0.10/libgsteffectv%(smext)s',
             'lib/gstreamer-0.10/libgstequalizer%(smext)s',
             'lib/gstreamer-0.10/libgstgdkpixbuf%(smext)s',
             'lib/gstreamer-0.10/libgstimagefreeze%(smext)s',
             'lib/gstreamer-0.10/libgstinterleave%(smext)s',
             'lib/gstreamer-0.10/libgstlevel%(smext)s',
             'lib/gstreamer-0.10/libgstmultifile%(smext)s',
             'lib/gstreamer-0.10/libgstreplaygain%(smext)s',
             'lib/gstreamer-0.10/libgstshapewipe%(smext)s',
             'lib/gstreamer-0.10/libgstsmpte%(smext)s',
             'lib/gstreamer-0.10/libgstspectrum%(smext)s',
             'lib/gstreamer-0.10/libgstvideobox%(smext)s',
             'lib/gstreamer-0.10/libgstvideocrop%(smext)s',
             'lib/gstreamer-0.10/libgstvideomixer%(smext)s',
    ]

    files_codecs_devel = [
             'lib/gstreamer-0.10/libgstalaw%(smext)s',
             'lib/gstreamer-0.10/libgstannodex%(smext)s',
             'lib/gstreamer-0.10/libgstapetag%(smext)s',
             'lib/gstreamer-0.10/libgstaudioparsers%(smext)s',
             'lib/gstreamer-0.10/libgstauparse%(smext)s',
             'lib/gstreamer-0.10/libgstavi%(smext)s',
             'lib/gstreamer-0.10/libgstflac%(smext)s',
             'lib/gstreamer-0.10/libgstflv%(smext)s',
             'lib/gstreamer-0.10/libgstflxdec%(smext)s',
             'lib/gstreamer-0.10/libgsticydemux%(smext)s',
             'lib/gstreamer-0.10/libgstid3demux%(smext)s',
             'lib/gstreamer-0.10/libgstisomp4%(smext)s',
             'lib/gstreamer-0.10/libgstjpeg%(smext)s',
             'lib/gstreamer-0.10/libgstmatroska%(smext)s',
             'lib/gstreamer-0.10/libgstmulaw%(smext)s',
             'lib/gstreamer-0.10/libgstmultipart%(smext)s',
             'lib/gstreamer-0.10/libgstpng%(smext)s',
             'lib/gstreamer-0.10/libgstspeex%(smext)s',
             'lib/gstreamer-0.10/libgsttaglib%(smext)s',
             'lib/gstreamer-0.10/libgstwavenc%(smext)s',
             'lib/gstreamer-0.10/libgstwavpack%(smext)s',
             'lib/gstreamer-0.10/libgstwavparse%(smext)s',
             'lib/gstreamer-0.10/libgsty4menc%(smext)s',
    ]

    files_net_devel = [
             'lib/gstreamer-0.10/libgstrtsp%(smext)s',
             'lib/gstreamer-0.10/libgstrtp%(smext)s',
             'lib/gstreamer-0.10/libgstrtpmanager%(smext)s',
             'lib/gstreamer-0.10/libgstsouphttpsrc%(smext)s',
             'lib/gstreamer-0.10/libgstudp%(smext)s',
    ]

    files_vis_devel = [
             'lib/gstreamer-0.10/libgstgoom%(smext)s',
             'lib/gstreamer-0.10/libgstgoom2k1%(smext)s',
            ]

    platform_files_capture_devel = {
        Platform.LINUX: [
              'lib/gstreamer-0.10/libgstvideo4linux2%(smext)s',
              'lib/gstreamer-0.10/libgstximagesrc%(smext)s',
             ]
    }

    platform_files_codecs_devel = {
        Platform.LINUX: [
             'lib/gstreamer-0.10/libgstdv%(smext)s',
            ],
        Platform.DARWIN: [
             'lib/gstreamer-0.10/libgstdv%(smext)s',
            ]
    }

    platform_files_sys_devel = {
        Platform.WINDOWS: [
             'gstreamer-0.10/libgstdirectsoundsink%(smext)s',
            ],
        Platform.LINUX: [
             'lib/gstreamer-0.10/libgstpulse%(smext)s',
            ],
        Platform.DARWIN: [
             'lib/gstreamer-0.10/libgstosxaudio%(smext)s',
             'lib/gstreamer-0.10/libgstosxvideosink%(smext)s',
            ]
    }

    # Static build will always fail on make check
    make_check = None

    def prepare(self):
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += '--disable-aalib --disable-esd '\
                '--disable-dv --disable-gtk-doc'
        if self.config.target_platform == Platform.DARWIN:
            self.configure_options += '--disable-gtk-doc '

        self.remotes['origin'] = ('%s/%s' %
                (self.config.git_root, 'gst-plugins-good.git'))
        self.tmp_destdir = tempfile.mkdtemp()
        self.make_install = 'make install DESTDIR=%s' % self.tmp_destdir
        self.repo_dir = os.path.join(self.config.local_sources, 'gst-plugins-good')

    def post_install(self):
        for cat in ['core', 'effects', 'codecs', 'net', 'vis']:
            name = 'files_%s_devel' % cat
            copy_files(self.tmp_destdir, to_unixpath(self.config.prefix),
                    getattr(self, name), self.extensions,
                    self.config.target_platform)
        for platform_cat in ['capture', 'codecs', 'sys']:
            name = 'platform_files_%s_devel' % platform_cat
            platform_files = getattr(self, name)
            if self.config.target_platform in platform_files:
                copy_files(self.tmp_destdir, self.config.prefix,
                    platform_files[self.config.target_platform],
                    self.extensions,
                    self.config.target_platform)
        shutil.rmtree(self.tmp_destdir)
